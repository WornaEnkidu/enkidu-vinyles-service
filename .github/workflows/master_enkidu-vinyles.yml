name: Deploy Service

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Make Maven Wrapper Executable
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean package -Pprod

      - name: Get JAR Filename
        id: get_jar
        run: |
          JAR_FILE=$(ls target/enkidu-vinyles-service-*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Create SSH Key File
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy .jar to server
        env:
          JAR_FILE: ${{ env.JAR_FILE }}
        run: |
          echo "$JAR_FILE"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$JAR_FILE" debian@51.254.114.210:/home/debian/enkidu-vinyles-service/

      - name: Deploy on Server
        env:
          JAR_FILE: ${{ env.JAR_FILE }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa debian@51.254.114.210 << 'ENDSSH'
            cd /home/debian/enkidu-vinyles-service/

            # Stop existing container if any
            CONTAINER_ID=$(docker ps -q --filter ancestor=enkidu-vinyles-service)
            if [ -n "$CONTAINER_ID" ]; then
              docker stop "$CONTAINER_ID"
            fi

            # Build and run the Docker container
            echo "Copying correct .jar file and starting Docker build..."
            echo "COPY $JAR_FILE app.jar" > Dockerfile
            echo "ENTRYPOINT [\"java\", \"-jar\", \"/app.jar\"]" >> Dockerfile
            docker build -t enkidu-vinyles-service .
            docker run -d -p 8080:8080 enkidu-vinyles-service
          ENDSSH
